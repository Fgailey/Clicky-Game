{"version":3,"sources":["components/Navbar.js","components/Scorebar.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","Component","Scorebar","props","highScore","clickedMessage","correctGuess","Cards","onClick","clicker","src","image","alt","name","App","state","chars","currentChar","filter","char","clicked","console","log","forEach","setState","sort","a","b","Math","random","this","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3acb58a8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./navbar.css\"\r\nclass Navbar extends Component {\r\n\r\n\r\n    render(){\r\n  return (\r\n    <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light game-nav\">\r\n            <h1 className=\"navbar-brand\">Clicky Game</h1>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\" />\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item mx-3\">\r\n                <a className=\"nav-item nav-link\" href=\"https://github.com/Fgailey/clicky-game\">GitHub</a>\r\n                </li>\r\n                <li className=\"nav-item mx-3\">\r\n                <a className=\"nav-item nav-link\" href=\"https://github.com/Fgailey/Portfolio-2\">Portfolio</a>\r\n                </li>\r\n                <li className=\"nav-item mx-3\">\r\n                <a className=\"nav-item nav-link\" href=\"https://www.linkedin.com/in/foster-gailey-391292165/\">LinkedIn</a>\r\n                </li>\r\n            </ul>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './scorebar.css'\r\n\r\nfunction Scorebar(props) {\r\n    \r\n        return (\r\n        <div>\r\n            <div className=\"container \">\r\n                <div className=\"row scorebar\">\r\n                    <div className=\"col ml-4\">HighScore: {props.highScore}</div>\r\n                    <div className=\"col-md-auto\">{props.clickedMessage}</div>\r\n                    <div className=\"col mr-4 text-right\">Correct: {props.correctGuess}/12</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Scorebar;","import React from 'react';\r\nimport \"./cards.css\"\r\n\r\n\r\nfunction Cards(props) {\r\n  return (\r\n    <div>\r\n      \r\n        <div className=\"col my-1\">\r\n          <div className=\"card chars\" onClick={() => props.clicker(props.id)}>\r\n            <img src={props.image} className=\"card-img-top\" alt={props.name} />\r\n          </div>\r\n        </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport Navbar from './components/Navbar'\nimport Scorebar from './components/Scorebar';\nimport Cards from './components/Cards';\nimport './components/cards.css';\nimport chars from './chars.json'\n\n\nlet clickedMessage = \"Click a card to start, dont click the same card twice!!\";\nlet highScore = 0;\nlet correctGuess = 0;\nclass App extends Component {\n  state = {\n    chars,\n    clickedMessage,\n    highScore,\n    correctGuess\n    \n};\n//this function will be called when one of the cards is clicked  \nclicker = id =>{\n  const chars = this.state.chars\n  \n  const currentChar = chars.filter(char => char.id === id)\n\n  //clickedChar is an array with only the most recent char inside it\n  //if the card property clicked is true then the user will lose\n  if (currentChar[0].clicked){\n    console.log(\"you lose\")\n\n    clickedMessage = \"Oh No you Lose! Better luck next time!\"\n\n    correctGuess = 0\n\n    //reset all clicked cards to false\n    chars.forEach(char => char.clicked = false);\n\n\n    this.setState({clickedMessage})\n    this.setState({correctGuess})\n    this.setState({chars})\n    \n  }\n  //if the correct guess count has not reached the max then continue the game\n  else if(correctGuess < 11){\n    console.log(\"right\")\n    currentChar[0].clicked = true;\n    \n    clickedMessage = \"Nice guess, keep it going\"\n\n    correctGuess++\n\n\n    if (highScore < correctGuess){\n      highScore = correctGuess\n    }\n\n    //sorts the array so the images chang order every click\n    chars.sort((a,b)=> 0.5 - Math.random())\n\n\n    this.setState({highScore})\n    this.setState({clickedMessage})\n    this.setState({correctGuess})\n    this.setState({chars})\n  }\n  //once the game has been won, announce win and reset the game\n  else{\n    console.log(\"win\")\n    \n    clickedMessage = \"CONGRATS YOU GOT THEM ALL RIGHT!!!, Now can you do it again?\"\n  \n    correctGuess = 0\n\n    highScore = 12\n\n    chars.forEach(char => char.clicked = false);\n\n\n    this.setState({correctGuess})\n    this.setState({clickedMessage})\n    this.setState({highScore})\n    this.setState({chars})\n  }\n\n  }\n  render(){\n    return (\n      <div>\n        <div className=\"container-fluid p-0\">\n\n        <Navbar />\n        <Scorebar \n          clickedMessage={this.state.clickedMessage}\n          highScore={this.state.highScore}\n          correctGuess={this.state.correctGuess}\n          />\n          </div>\n        <div className=\"container body-background\">\n          <div className=\"row my-1 justify-content-md-center\">\n            {\n              this.state.chars.map(char => (\n                <Cards  \n                key={char.id} \n                id={char.id} \n                name={char.name}\n                image={char.image}\n                clicked={char.clicked}\n                clicker={this.clicker}\n                />)\n              )\n            }\n          </div>\n        </div>\n\n      </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}