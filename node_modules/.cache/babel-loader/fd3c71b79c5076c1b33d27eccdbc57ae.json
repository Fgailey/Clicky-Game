{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\foste\\\\trilogy\\\\class-content\\\\homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\foste\\\\trilogy\\\\class-content\\\\homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\foste\\\\trilogy\\\\class-content\\\\homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\foste\\\\trilogy\\\\class-content\\\\homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\foste\\\\trilogy\\\\class-content\\\\homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';// import logo from './logo.svg';\nimport Navbar from'./components/Navbar';import Scorebar from'./components/Scorebar';import Cards from'./components/Cards';import'./components/cards.css';import chars from'./chars.json';var clickedMessage=\"Click a card to start, dont click the same card twice!!\";var highScore=0;var correctGuess=0;var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(){var _getPrototypeOf2;var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(App)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={chars:chars,clickedMessage:clickedMessage,highScore:highScore,correctGuess:correctGuess};_this.clicker=function(id){var chars=_this.state.chars;var currentChar=chars.filter(function(char){return char.id===id;});//clickedChar is an array with only the most recent char inside it\n//if the card property clicked is true then the user will lose\nif(currentChar[0].clicked){console.log(\"you lose\");clickedMessage=\"Oh No you Lose! Better luck next time!\";correctGuess=0;//reset all clicked cards to false\nchars.forEach(function(char){return char.clicked=false;});_this.setState({clickedMessage:clickedMessage});_this.setState({correctGuess:correctGuess});_this.setState({chars:chars});}//if the correct guess count has not reached the max then continue the game\nelse if(correctGuess<11){console.log(\"right\");currentChar[0].clicked=true;clickedMessage=\"Nice guess, keep it going\";correctGuess++;if(highScore<correctGuess){highScore=correctGuess;}//sorts the array so the images chang order every click\nchars.sort(function(a,b){return 0.5-Math.random();});_this.setState({highScore:highScore});_this.setState({clickedMessage:clickedMessage});_this.setState({correctGuess:correctGuess});_this.setState({chars:chars});}//once the game has been won, announce win and reset the game\nelse{console.log(\"win\");clickedMessage=\"CONGRATS YOU GOT THEM ALL RIGHT!!!, Now can you do it again?\";correctGuess=0;highScore=12;chars.forEach(function(char){return char.clicked=false;});_this.setState({correctGuess:correctGuess});_this.setState({clickedMessage:clickedMessage});_this.setState({highScore:highScore});_this.setState({chars:chars});}};return _this;}_createClass(App,[{key:\"render\",value:function render(){var _this2=this;return React.createElement(\"div\",null,React.createElement(\"div\",{className:\"container-fluid p-0\"},React.createElement(Navbar,null),React.createElement(Scorebar,{clickedMessage:this.state.clickedMessage,highScore:this.state.highScore,correctGuess:this.state.correctGuess})),React.createElement(\"div\",{className:\"container body-background\"},React.createElement(\"div\",{className:\"row my-1 justify-content-md-center\"},this.state.chars.map(function(char){return React.createElement(Cards,{key:char.id,id:char.id,name:char.name,image:char.image,clicked:char.clicked,clicker:_this2.clicker});}))));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["C:/Users/foste/trilogy/class-content/homework/clicky-game/src/App.js"],"names":["React","Component","Navbar","Scorebar","Cards","chars","clickedMessage","highScore","correctGuess","App","state","clicker","id","currentChar","filter","char","clicked","console","log","forEach","setState","sort","a","b","Math","random","map","name","image"],"mappings":"uvBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA;AACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,MAAOC,CAAAA,QAAP,KAAqB,uBAArB,CACA,MAAOC,CAAAA,KAAP,KAAkB,oBAAlB,CACA,MAAO,wBAAP,CACA,MAAOC,CAAAA,KAAP,KAAkB,cAAlB,CAGA,GAAIC,CAAAA,cAAc,CAAG,yDAArB,CACA,GAAIC,CAAAA,SAAS,CAAG,CAAhB,CACA,GAAIC,CAAAA,YAAY,CAAG,CAAnB,C,GACMC,CAAAA,G,mXACJC,K,CAAQ,CACNL,KAAK,CAALA,KADM,CAENC,cAAc,CAAdA,cAFM,CAGNC,SAAS,CAATA,SAHM,CAINC,YAAY,CAAZA,YAJM,C,OAQVG,O,CAAU,SAAAC,EAAE,CAAG,CACb,GAAMP,CAAAA,KAAK,CAAG,MAAKK,KAAL,CAAWL,KAAzB,CAEA,GAAMQ,CAAAA,WAAW,CAAGR,KAAK,CAACS,MAAN,CAAa,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACH,EAAL,GAAYA,EAAhB,EAAjB,CAApB,CAEA;AACA;AACA,GAAIC,WAAW,CAAC,CAAD,CAAX,CAAeG,OAAnB,CAA2B,CACzBC,OAAO,CAACC,GAAR,CAAY,UAAZ,EAEAZ,cAAc,CAAG,wCAAjB,CAEAE,YAAY,CAAG,CAAf,CAEA;AACAH,KAAK,CAACc,OAAN,CAAc,SAAAJ,IAAI,QAAIA,CAAAA,IAAI,CAACC,OAAL,CAAe,KAAnB,EAAlB,EAGA,MAAKI,QAAL,CAAc,CAACd,cAAc,CAAdA,cAAD,CAAd,EACA,MAAKc,QAAL,CAAc,CAACZ,YAAY,CAAZA,YAAD,CAAd,EACA,MAAKY,QAAL,CAAc,CAACf,KAAK,CAALA,KAAD,CAAd,EAED,CACD;AAhBA,IAiBK,IAAGG,YAAY,CAAG,EAAlB,CAAqB,CACxBS,OAAO,CAACC,GAAR,CAAY,OAAZ,EACAL,WAAW,CAAC,CAAD,CAAX,CAAeG,OAAf,CAAyB,IAAzB,CAEAV,cAAc,CAAG,2BAAjB,CAEAE,YAAY,GAGZ,GAAID,SAAS,CAAGC,YAAhB,CAA6B,CAC3BD,SAAS,CAAGC,YAAZ,CACD,CAED;AACAH,KAAK,CAACgB,IAAN,CAAW,SAACC,CAAD,CAAGC,CAAH,QAAQ,KAAMC,IAAI,CAACC,MAAL,EAAd,EAAX,EAGA,MAAKL,QAAL,CAAc,CAACb,SAAS,CAATA,SAAD,CAAd,EACA,MAAKa,QAAL,CAAc,CAACd,cAAc,CAAdA,cAAD,CAAd,EACA,MAAKc,QAAL,CAAc,CAACZ,YAAY,CAAZA,YAAD,CAAd,EACA,MAAKY,QAAL,CAAc,CAACf,KAAK,CAALA,KAAD,CAAd,EACD,CACD;AAtBK,IAuBD,CACFY,OAAO,CAACC,GAAR,CAAY,KAAZ,EAEAZ,cAAc,CAAG,8DAAjB,CAEAE,YAAY,CAAG,CAAf,CAEAD,SAAS,CAAG,EAAZ,CAEAF,KAAK,CAACc,OAAN,CAAc,SAAAJ,IAAI,QAAIA,CAAAA,IAAI,CAACC,OAAL,CAAe,KAAnB,EAAlB,EAGA,MAAKI,QAAL,CAAc,CAACZ,YAAY,CAAZA,YAAD,CAAd,EACA,MAAKY,QAAL,CAAc,CAACd,cAAc,CAAdA,cAAD,CAAd,EACA,MAAKc,QAAL,CAAc,CAACb,SAAS,CAATA,SAAD,CAAd,EACA,MAAKa,QAAL,CAAc,CAACf,KAAK,CAALA,KAAD,CAAd,EACD,CAEA,C,sEACO,iBACN,MACE,gCACE,2BAAK,SAAS,CAAC,qBAAf,EAEA,oBAAC,MAAD,MAFA,CAGA,oBAAC,QAAD,EACE,cAAc,CAAE,KAAKK,KAAL,CAAWJ,cAD7B,CAEE,SAAS,CAAE,KAAKI,KAAL,CAAWH,SAFxB,CAGE,YAAY,CAAE,KAAKG,KAAL,CAAWF,YAH3B,EAHA,CADF,CAUE,2BAAK,SAAS,CAAC,2BAAf,EACE,2BAAK,SAAS,CAAC,oCAAf,EAEI,KAAKE,KAAL,CAAWL,KAAX,CAAiBqB,GAAjB,CAAqB,SAAAX,IAAI,QACvB,qBAAC,KAAD,EACA,GAAG,CAAEA,IAAI,CAACH,EADV,CAEA,EAAE,CAAEG,IAAI,CAACH,EAFT,CAGA,IAAI,CAAEG,IAAI,CAACY,IAHX,CAIA,KAAK,CAAEZ,IAAI,CAACa,KAJZ,CAKA,OAAO,CAAEb,IAAI,CAACC,OALd,CAMA,OAAO,CAAE,MAAI,CAACL,OANd,EADuB,EAAzB,CAFJ,CADF,CAVF,CADF,CA8BH,C,iBA1GiBV,S,EA6GlB,cAAeQ,CAAAA,GAAf","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport Navbar from './components/Navbar'\nimport Scorebar from './components/Scorebar';\nimport Cards from './components/Cards';\nimport './components/cards.css';\nimport chars from './chars.json'\n\n\nlet clickedMessage = \"Click a card to start, dont click the same card twice!!\";\nlet highScore = 0;\nlet correctGuess = 0;\nclass App extends Component {\n  state = {\n    chars,\n    clickedMessage,\n    highScore,\n    correctGuess\n    \n};\n//this function will be called when one of the cards is clicked  \nclicker = id =>{\n  const chars = this.state.chars\n  \n  const currentChar = chars.filter(char => char.id === id)\n\n  //clickedChar is an array with only the most recent char inside it\n  //if the card property clicked is true then the user will lose\n  if (currentChar[0].clicked){\n    console.log(\"you lose\")\n\n    clickedMessage = \"Oh No you Lose! Better luck next time!\"\n\n    correctGuess = 0\n\n    //reset all clicked cards to false\n    chars.forEach(char => char.clicked = false);\n\n\n    this.setState({clickedMessage})\n    this.setState({correctGuess})\n    this.setState({chars})\n    \n  }\n  //if the correct guess count has not reached the max then continue the game\n  else if(correctGuess < 11){\n    console.log(\"right\")\n    currentChar[0].clicked = true;\n    \n    clickedMessage = \"Nice guess, keep it going\"\n\n    correctGuess++\n\n\n    if (highScore < correctGuess){\n      highScore = correctGuess\n    }\n\n    //sorts the array so the images chang order every click\n    chars.sort((a,b)=> 0.5 - Math.random())\n\n\n    this.setState({highScore})\n    this.setState({clickedMessage})\n    this.setState({correctGuess})\n    this.setState({chars})\n  }\n  //once the game has been won, announce win and reset the game\n  else{\n    console.log(\"win\")\n    \n    clickedMessage = \"CONGRATS YOU GOT THEM ALL RIGHT!!!, Now can you do it again?\"\n  \n    correctGuess = 0\n\n    highScore = 12\n\n    chars.forEach(char => char.clicked = false);\n\n\n    this.setState({correctGuess})\n    this.setState({clickedMessage})\n    this.setState({highScore})\n    this.setState({chars})\n  }\n\n  }\n  render(){\n    return (\n      <div>\n        <div className=\"container-fluid p-0\">\n\n        <Navbar />\n        <Scorebar \n          clickedMessage={this.state.clickedMessage}\n          highScore={this.state.highScore}\n          correctGuess={this.state.correctGuess}\n          />\n          </div>\n        <div className=\"container body-background\">\n          <div className=\"row my-1 justify-content-md-center\">\n            {\n              this.state.chars.map(char => (\n                <Cards  \n                key={char.id} \n                id={char.id} \n                name={char.name}\n                image={char.image}\n                clicked={char.clicked}\n                clicker={this.clicker}\n                />)\n              )\n            }\n          </div>\n        </div>\n\n      </div>\n  );\n}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}